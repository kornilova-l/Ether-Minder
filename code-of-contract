contract EtherMinder { // each contract is a class
    
    enum ChallengeState {active, failed, achieved} // list of all possible states of challenge
    
    struct Challenge {
        address challengee; // address of wallet of challengee
        address trustee; // address of wallet of person who can mark challenge as completed/failed
        uint bet;  // bet
        string description; // description of challenge
        ChallengeState state; // state of challenge (active, failed, achieved)
    }
    
    // events of adding, achieving and failing a challenge
    // events can be seen on page of contract without executing any functions
    event ChallengeAdded(uint id); 
    event ChallengeAchieved(uint id); 
    event ChallengeFailed(uint id);
    
    Challenge[] public challenges; // array of challenges
    
    function EtherMinder() { // constructor
    }
    
    // add challenge
    // Input parameters:
    //      description of challenge
    //      address of wallet of trusted person (who will mark challenge as completed/failed)
    function challenge(string _description, address _trustee) payable { 
        challenges.push(Challenge({ // add new challenge to array of challenges
            challengee: msg.sender,
            bet: msg.value,
            description: _description,
            trustee: _trustee,
            state: ChallengeState.active
        }));
        ChallengeAdded(challenges.length - 1); // call event ChallengeAdded
    }
    
    // mark challenge as achieved
    // input parameters:
    //      id of challenge
    function achieveChallenge(uint challengeId) { 
        Challenge c = challenges[challengeId]; 
        if (msg.sender == c.trustee) { // if person is trusted
            if (!c.challengee.send(c.bet)) // money is sent back
                throw;
            c.state = ChallengeState.achieved; // change state to 'achieved'
            ChallengeAchieved(challengeId); // call event ChallengeAchieved
        }
    }
    
    // mark challenge as failed
    // input parameters:
    //      id of challenge
    function failChallenge(uint challengeId) {
        Challenge c = challenges[challengeId];
        if (msg.sender == c.trustee) { // if person is trusted
            address empty = 0;
            if (!empty.send(c.bet)) // money is destroyed
                throw;
            c.state = ChallengeState.failed;  // change state to 'achieved'
            ChallengeFailed(challengeId); // call event ChallengeFailed
        }
    }     
 }
